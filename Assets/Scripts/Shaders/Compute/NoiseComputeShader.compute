// NoiseComputeShader.compute

#pragma kernel CSMain

#include "../../Shaders/Includes/FractalNoise.cginc"
#include "../../Shaders/Includes/Maths.cginc"

StructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;
uint numVertices;

float numLayers;
float scale;
float persistence;
float lacunarity;
float multiplier;

// Continent settings:
float oceanDepthMultiplier;
float oceanFloorDepth;
float oceanFloorSmoothing;
float mountainBlend;

// Experimental; pass full params struct instead
float4 noiseParams_continents[3];
float4 noiseParams_mask[3];
float4 noiseParams_mountains[3];

[numthreads(512, 1, 1)]
void CSMain (uint id : SV_DispatchThreadID)
{
    if (id >= numVertices) { return; }

    const float3 vertexPosition = vertices[id];

    // Noise for landmass shape
    // float continentShape = simpleNoise(vertexPosition, numLayers, scale, persistence, lacunarity, multiplier);
    float continentShape = simpleNoise(vertexPosition, noiseParams_continents);
    
    // Flatten ocean bed & deepen oceans
    continentShape = smoothMax(continentShape, -oceanFloorDepth, oceanFloorSmoothing);
    continentShape *= continentShape < 0 ? 1 + oceanDepthMultiplier : 1;
    

    // Noise for mountain ridges
    const float mountainShape = smoothedRidgeNoise(vertexPosition, noiseParams_mountains);
    
    // Mask layer for ocean-land transition
    const float mask = Blend(0, mountainBlend, simpleNoise(vertexPosition, noiseParams_mask));
    
    const float finalElevation = 1 + continentShape * 0.01 + mountainShape * 0.01 * mask;
    
    heights[id] = finalElevation;
}
